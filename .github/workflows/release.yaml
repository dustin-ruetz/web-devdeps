# Use the `npm run github/release` command to test this GitHub Action workflow locally (performs a dry-run release).
#
# Adapted from "GitHub Actions - `.github/workflows/release.yml` configuration for Node projects" CI configuration recipe:
# https://semantic-release.gitbook.io/semantic-release/recipes/ci-configurations/github-actions#github-workflows-release.yml-configuration-for-node-projects
name: release
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: Perform a dry-run of the release; defaults to `false`, but set to `true` in the `github/release` NPM script.
        default: false
        type: boolean
# Excerpt from https://github.com/semantic-release/npm#npm-provenance-on-github-actions:
# > For package provenance to be signed on the GitHub Actions CI the following permission is required to be enabled on the job:
permissions:
  # > `id-token: write` enables use of OIDC for npm provenance.
  id-token: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: üõí Git checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all Git history for all branches and tags.
          fetch-depth: 0
          # Excerpt from https://semantic-release.gitbook.io/semantic-release/recipes/ci-configurations/github-actions#pushing-package.json-changes-to-your-repository:
          # > The actions/checkout `persist-credentials` option needs to be `false`, otherwise the generated `GITHUB_TOKEN` will interfere with the custom one.
          persist-credentials: false
      - name: üîÅ Run `setup` composite action
        uses: ./.github/composite-actions/setup/
        with:
          # Specify the Node.js version number by referencing the `.node-version` file that's located in the root of the repo.
          node-version-file: .node-version
      # Note that while `validate` is configured to run on PRs, these commands should also
      # be run prior to releasing if/when commits are pushed directly to the `main` branch.
      - name: üìã Validate codebase (üõ†Ô∏è build, üßê check, üß™ test)
        run: npm run validate
      # https://developer.1password.com/docs/ci-cd/github-actions
      # https://github.com/1Password/load-secrets-action
      - name: üîê Load secrets from 1Password
        id: op-secrets
        uses: 1Password/load-secrets-action@v2
        env:
          # https://github.com/dustin-ruetz/web-devdeps/settings/secrets/actions
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          # Human-readable 1Password CLI secret reference - 'op://SA - Repos_GitHub/web-devdeps/$FIELD_LABEL'
          WEB_DEVDEPS_GITHUB_TOKEN: op://yhyrnlsxmxerazmg3j2rvjxzpq/bws336u3hgbaf4y6zszsiw4xw4/WEB_DEVDEPS_GITHUB_TOKEN
          WEB_DEVDEPS_NPM_TOKEN: op://yhyrnlsxmxerazmg3j2rvjxzpq/bws336u3hgbaf4y6zszsiw4xw4/WEB_DEVDEPS_NPM_TOKEN
        with:
          export-env: false
          unset-previous: true
      - name: üì¶ Release package
        # semantic-release requires specific key names for environment variables.
        # https://semantic-release.gitbook.io/semantic-release/usage/ci-configuration#authentication
        env:
          DRY_RUN: ${{ github.event.inputs.DRY_RUN == 'true' && '--dry-run' || '' }}
          GITHUB_TOKEN: ${{ steps.op-secrets.outputs.WEB_DEVDEPS_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ steps.op-secrets.outputs.WEB_DEVDEPS_NPM_TOKEN }}
        run: npx semantic-release $DRY_RUN --extends ./lib/config/semantic-release.config.js
